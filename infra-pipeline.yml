AWSTemplateFormatVersion: '2010-09-09'
Description: Serverless Tic-Tac-Toe App with Lambda, API Gateway, CodeBuild, CodePipeline, and S3 Website Hosting

Parameters:
  GitHubOwner:
    Type: AWS::SSM::Parameter::Value<String>
    Default: arn:aws:ssm:us-west-1:971937583465:parameter/github/cicd/github-owner
    Description: SSM parameter ARN for GitHub repository owner (username/org)
  GitHubRepo:
    Type: AWS::SSM::Parameter::Value<String>
    Default: arn:aws:ssm:us-west-1:971937583465:parameter/github/cicd/repo-name
    Description: SSM parameter ARN for GitHub repository name
  GitHubBranch:
    Type: AWS::SSM::Parameter::Value<String>
    Default: arn:aws:ssm:us-west-1:971937583465:parameter/github/cicd/branch
    Description: SSM parameter ARN for GitHub branch to build from
  GitHubOAuthToken:
    Type: AWS::SSM::Parameter::Value<String>
    Default: arn:aws:ssm:us-west-1:971937583465:parameter/github/cicd/token
    Description: SSM parameter ARN for GitHub OAuth token (Personal Access Token)
  LambdaMemorySize:
    Type: AWS::SSM::Parameter::Value<String>
    Default: arn:aws:ssm:us-west-1:971937583465:parameter/cloudformation/lamda/memory
    Description: SSM parameter ARN for Lambda memory size (MB)
  LambdaEphemeralStorage:
    Type: AWS::SSM::Parameter::Value<String>
    Default: arn:aws:ssm:us-west-1:971937583465:parameter/cloudformation/lamda/storage
    Description: SSM parameter ARN for Lambda ephemeral storage (MB)

Resources:
  ArtifactStore:
    Type: AWS::S3::Bucket

  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      WebsiteConfiguration:
        IndexDocument: index.html
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins: ["*"]
            AllowedMethods: ["GET"]
            AllowedHeaders: ["*"]
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: false  # <-- Allow public policies to be attached
        IgnorePublicAcls: true
        RestrictPublicBuckets: false

  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "${WebsiteBucket.Arn}/*"

  TicTacToeLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecution
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  TicTacToeLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: TicTacToeLambda
      Handler: lambda_function.lambda_handler
      Role: !GetAtt TicTacToeLambdaRole.Arn
      Runtime: python3.9
      Timeout: 10
      MemorySize: !Ref LambdaMemorySize
      EphemeralStorage:
        Size: !Ref LambdaEphemeralStorage
      # vCPU is not directly configurable, but for provisioned concurrency or larger RAM, AWS allocates more CPU
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {"statusCode": 200, "body": "Lambda placeholder"}

  TicTacToeLambdaAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref TicTacToeLambda
      FunctionVersion: $LATEST
      Name: live

  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: TicTacToeApi

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: tictactoe

  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - { LambdaArn: !GetAtt TicTacToeLambda.Arn }

  LambdaApiInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref TicTacToeLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/POST/tictactoe"

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                  - lambda:UpdateFunctionCode
                  - lambda:GetFunction
                  - s3:*
                Resource: "*"

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: TicTacToeBuild
      Source:
        Type: CODEPIPELINE
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref "AWS::Region"
          - Name: LAMBDA_FUNCTION_NAME
            Value: !Ref TicTacToeLambda
      ServiceRole: !GetAtt CodeBuildRole.Arn

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:*
                  - s3:*
                  - iam:PassRole
                  - lambda:GetFunction
                  - lambda:UpdateFunctionCode
                Resource: "*"

  ApiGatewayOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ""
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGatewayMethod
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: dev

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactStore
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubOAuthToken
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              Configuration:
                ProjectName: !Ref CodeBuildProject
              RunOrder: 1

Outputs:
  ApiEndpoint:
    Description: "API Gateway Endpoint"
    Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/dev/tictactoe"
  WebsiteURL:
    Description: "S3 Website URL"
    Value: !Sub "http://${WebsiteBucket}.s3-website-${AWS::Region}.amazonaws.com"
