AWSTemplateFormatVersion: '2010-09-09'
Description: Serverless Tic-Tac-Toe App with Lambda, API Gateway, CodeBuild, CodePipeline, and S3 Website Hosting

Parameters:
  GitHubOwner:
    Type: String
    Default: rishi-7span
    Description: SSM parameter ARN for GitHub repository owner (username/org)
  GitHubRepo:
    Type: String
    Default: everest-ai-deployment
    Description: SSM parameter ARN for GitHub repository name
  GitHubBranch:
    Type: String
    Default: main
    Description: SSM parameter ARN for GitHub branch to build from
  GitHubOAuthToken:
    Type: AWS::SSM::Parameter::Value<String>
    Default: arn:aws:ssm:us-west-1:971937583465:parameter/github/cicd/token
    Description: SSM parameter ARN for GitHub OAuth token (Personal Access Token)
  LambdaMemorySize:
    Type: Number
    Default: 512
    Description: SSM parameter ARN for Lambda memory size (MB)
  LambdaEphemeralStorage:
    Type: Number
    Default: 1024
    Description: SSM parameter ARN for Lambda ephemeral storage (MB)
  DebugParam:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /everest/ai/DEBUG
    Description: SSM parameter for DEBUG
  LLMApiKeyParam:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /everest/ai/LLM_API_KEY
    Description: SSM parameter for LLM_API_KEY
  LLMEmbeddingModelParam:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /everest/ai/LLM_EMBEDDING_MODEL
    Description: SSM parameter for LLM_EMBEDDING_MODEL
  LLMModelParam:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /everest/ai/LLM_MODEL
    Description: SSM parameter for LLM_MODEL
  LLMProviderParam:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /everest/ai/LLM_PROVIDER
    Description: SSM parameter for LLM_PROVIDER
  ResumeChunkOverlapParam:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /everest/ai/RESUME_CHUNK_OVERLAP
    Description: SSM parameter for RESUME_CHUNK_OVERLAP
  ResumeChunkSizeParam:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /everest/ai/RESUME_CHUNK_SIZE
    Description: SSM parameter for RESUME_CHUNK_SIZE
  ResumeQdrantApiKeyParam:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /everest/ai/RESUME_QDRANT_API_KEY
    Description: SSM parameter for RESUME_QDRANT_API_KEY
  ResumeQdrantCollectionNameParam:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /everest/ai/RESUME_QDRANT_COLLECTION_NAME
    Description: SSM parameter for RESUME_QDRANT_COLLECTION_NAME
  ResumeQdrantUrlParam:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /everest/ai/RESUME_QDRANT_URL
    Description: SSM parameter for RESUME_QDRANT_URL

Resources:
  ArtifactStore:
    Type: AWS::S3::Bucket

  TicTacToeLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecution
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - s3:GetObject
                Resource: "*"
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:SetRepositoryPolicy
                  - ecr:GetRepositoryPolicy
                  - ecr:DescribeRepositories
                  - ecr:ListImages
                  - ecr:DescribeImages
                Resource: "*"

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                  - s3:*
                  - codebuild:*
                  - codepipeline:*
                  - lambda:GetFunction
                  - lambda:UpdateFunctionCode
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:CompleteLayerUpload
                  - ecr:GetDownloadUrlForLayer
                  - ecr:InitiateLayerUpload
                  - ecr:PutImage
                  - ecr:UploadLayerPart
                  - iam:PassRole
                Resource: "*"

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:*
                  - s3:*
                  - iam:PassRole
                  - lambda:GetFunction
                  - lambda:UpdateFunctionCode
                Resource: "*"

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: TicTacToeBuild
      Source:
        Type: CODEPIPELINE
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref "AWS::Region"
          - Name: LAMBDA_FUNCTION_NAME
            Value: !Ref TicTacToeLambda
          - Name: ECR_REPOSITORY_URI
            Value: 971937583465.dkr.ecr.us-west-1.amazonaws.com/python-ml:latest
      ServiceRole: !GetAtt CodeBuildRole.Arn

  TicTacToeLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: TicTacToeLambda
      Role: !GetAtt TicTacToeLambdaRole.Arn
      PackageType: Image
      Code:
        ImageUri: "971937583465.dkr.ecr.us-west-1.amazonaws.com/python-ml:latest"
      Timeout: 10
      MemorySize: !Ref LambdaMemorySize
      EphemeralStorage:
        Size: !Ref LambdaEphemeralStorage
      Environment:
        Variables:
          DEBUG: !Ref DebugParam
          LLM_API_KEY: !Ref LLMApiKeyParam
          LLM_EMBEDDING_MODEL: !Ref LLMEmbeddingModelParam
          LLM_MODEL: !Ref LLMModelParam
          LLM_PROVIDER: !Ref LLMProviderParam
          RESUME_CHUNK_OVERLAP: !Ref ResumeChunkOverlapParam
          RESUME_CHUNK_SIZE: !Ref ResumeChunkSizeParam
          RESUME_QDRANT_API_KEY: !Ref ResumeQdrantApiKeyParam
          RESUME_QDRANT_COLLECTION_NAME: !Ref ResumeQdrantCollectionNameParam
          RESUME_QDRANT_URL: !Ref ResumeQdrantUrlParam

  TicTacToeLambdaAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref TicTacToeLambda
      FunctionVersion: $LATEST
      Name: live

  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: PdfQnAApi

  # Proxy resource for API Gateway (catch-all path)
  ApiGatewayProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: '{proxy+}'

  ApiGatewayProxyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayProxyResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TicTacToeLambda.Arn}/invocations

  # Root resource (/) - ANY method for proxy
  ApiGatewayRootAnyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !GetAtt ApiGatewayRestApi.RootResourceId
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TicTacToeLambda.Arn}/invocations

  LambdaApiInvokePermissionProxy:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref TicTacToeLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/*/*

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayRootAnyMethod
      - ApiGatewayProxyMethod
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: dev

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactStore
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubOAuthToken
                PollForSourceChanges: false
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              Configuration:
                ProjectName: !Ref CodeBuildProject
              RunOrder: 1

  PipelineWebhook:
    Type: AWS::CodePipeline::Webhook
    Properties:
      Name: CustomGitHubWebhook
      TargetPipeline: !Ref Pipeline
      TargetPipelineVersion: !GetAtt Pipeline.Version
      TargetAction: Source
      Filters:
        - JsonPath: "$.ref"
          MatchEquals: "refs/heads/{Branch}"
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: !Ref GitHubOAuthToken
      RegisterWithThirdParty: true



  PipelineWebhook:
    Type: AWS::CodePipeline::Webhook
    Properties:
      Name: CustomGitHubWebhook
      TargetPipeline: !Ref Pipeline
      TargetPipelineVersion: !GetAtt Pipeline.Version
      TargetAction: Source
      Filters:
        - JsonPath: "$.ref"
          MatchEquals: "refs/heads/{Branch}"
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: !Ref GitHubOAuthToken
      RegisterWithThirdParty: true


  PipelineWebhook:
    Type: AWS::CodePipeline::Webhook
    Properties:
      Name: CustomGitHubWebhook
      TargetPipeline: !Ref Pipeline
      TargetPipelineVersion: !GetAtt Pipeline.Version
      TargetAction: Source
      Filters:
        - JsonPath: "$.ref"
          MatchEquals: "refs/heads/{Branch}"
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: !Ref GitHubOAuthToken
      RegisterWithThirdParty: true

Outputs:
  ApiEndpoint:
    Description: "API Gateway Endpoint"
    Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/dev"

